/** Generated by itemis CREATE code generator. */

#ifndef STATECHART_H_
#define STATECHART_H_

#ifdef __cplusplus
extern "C" {
#endif

/*!
* @file
* @brief Header of the state machine 'Statechart'.
*/

/*!
* @brief Forward declaration for the Statechart state machine.
*/
typedef struct Statechart Statechart;

/*!
* @brief Forward declaration of the data structure for the StatechartIfaceButton interface scope.
*/
typedef struct StatechartIfaceButton StatechartIfaceButton;

/*!
* @brief Forward declaration of the data structure for the StatechartInternal interface scope.
*/
typedef struct StatechartInternal StatechartInternal;

#ifdef __cplusplus
}
#endif

#include "../src/sc_types.h"
#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif 

/*! @brief Define the buffer size for the event queue. */
#ifndef STATECHART_EVENTQUEUE_BUFFERSIZE
#define STATECHART_EVENTQUEUE_BUFFERSIZE 20
#endif

/*! @brief Define the buffer size for the in event queue. */
#ifndef STATECHART_IN_EVENTQUEUE_BUFFERSIZE
#define STATECHART_IN_EVENTQUEUE_BUFFERSIZE STATECHART_EVENTQUEUE_BUFFERSIZE
#endif

/*! @brief Define the invalid event value. */
#ifndef SC_INVALID_EVENT_VALUE
#define SC_INVALID_EVENT_VALUE 0
#endif

/*! @brief Define the number of states in the state enum. */
#define STATECHART_STATE_COUNT 7

/*! @brief Define the dimension of the state configuration vector for orthogonal states. */
#define STATECHART_MAX_ORTHOGONAL_STATES 1

/*! @brief Define indices of states in the StateConfVector. */
#define SCVI_STATECHART_MAIN_REGION_MONEY 0
#define SCVI_STATECHART_MAIN_REGION_INIT 0
#define SCVI_STATECHART_MAIN_REGION_SELECTION 0
#define SCVI_STATECHART_MAIN_REGION_RETURN_CREDIT 0
#define SCVI_STATECHART_MAIN_REGION_RETURN_PRODUCT 0
#define SCVI_STATECHART_MAIN_REGION_RETURN_PRODUCT_CALCULATE_THE_NEW_CASH_VALUE_DISPLAY_ERROR 0
#define SCVI_STATECHART_MAIN_REGION_RETURN_PRODUCT_CALCULATE_THE_NEW_CASH_VALUE_DISPLAY_NORMAL 0

/*! @brief Enum of event names in the statechart. */
typedef enum {
    Statechart_invalid_event = SC_INVALID_EVENT_VALUE,
    Statechart_Button_One_Euro,
    Statechart_Button_Two_Euro,
    Statechart_Button_Select,
    Statechart_Button_Enter
} StatechartEventID;

/*! @brief Struct that represents a single event. */
typedef struct {
    StatechartEventID name;
} statechart_event;

/*! @brief Queue that holds the raised events. */
typedef struct statechart_eventqueue_s {
    statechart_event *events;
    sc_integer capacity;
    sc_integer pop_index;
    sc_integer push_index;
    sc_integer size;
} statechart_eventqueue;

/*! @brief Enumeration of all states. */
typedef enum {
    Statechart_last_state,
    Statechart_main_region_Money,
    Statechart_main_region_INIT,
    Statechart_main_region_Selection,
    Statechart_main_region_Return_Credit,
    Statechart_main_region_Return_Product,
    Statechart_main_region_Return_Product_Calculate_the_new_cash_value_Display_Error,
    Statechart_main_region_Return_Product_Calculate_the_new_cash_value_Display_Normal
} StatechartStates;

/*! @brief Type declaration of the data structure for the StatechartIfaceButton interface scope. */
struct StatechartIfaceButton {
    sc_boolean One_Euro_raised;
    sc_boolean Two_Euro_raised;
    sc_boolean Select_raised;
    sc_boolean Enter_raised;
};

/*! @brief Type declaration of the data structure for the StatechartInternal interface scope. */
struct StatechartInternal {
    sc_integer Cash;
    sc_integer Product;
};

/*! 
 * @brief Type declaration of the data structure for the Statechart state machine.
 * This data structure has to be allocated by the client code.
 */
struct Statechart {
    StatechartStates stateConfVector[STATECHART_MAX_ORTHOGONAL_STATES];
    StatechartIfaceButton ifaceButton;
    StatechartInternal internal;
    sc_boolean completed;
    sc_boolean doCompletion;
    sc_boolean isExecuting;
    statechart_eventqueue in_event_queue;
    statechart_event in_buffer[STATECHART_IN_EVENTQUEUE_BUFFERSIZE];
};

/*!
 * @brief Initializes the Statechart state machine data structures. Must be called before first usage.
 * 
 * @param handle Pointer to the statechart instance
 */
extern void statechart_init(Statechart* handle);

/*!
 * @brief Activates the state machine.
 * 
 * @param handle Pointer to the statechart instance
 */
extern void statechart_enter(Statechart* handle);

/*!
 * @brief Deactivates the state machine.
 * 
 * @param handle Pointer to the statechart instance
 */
extern void statechart_exit(Statechart* handle);

/*!
 * @brief Can be used by the client code to trigger a run to completion step without raising an event.
 * 
 * @param handle Pointer to the statechart instance
 */
extern void statechart_trigger_without_event(Statechart* handle);

/*!
 * @brief Raises the in event 'One_Euro' that is defined in the interface scope 'Button'.
 * 
 * @param handle Pointer to the statechart instance
 */
extern void statechart_Button_raise_one_Euro(Statechart* handle);

/*!
 * @brief Raises the in event 'Two_Euro' that is defined in the interface scope 'Button'.
 * 
 * @param handle Pointer to the statechart instance
 */
extern void statechart_Button_raise_two_Euro(Statechart* handle);

/*!
 * @brief Raises the in event 'Select' that is defined in the interface scope 'Button'.
 * 
 * @param handle Pointer to the statechart instance
 */
extern void statechart_Button_raise_select(Statechart* handle);

/*!
 * @brief Raises the in event 'Enter' that is defined in the interface scope 'Button'.
 * 
 * @param handle Pointer to the statechart instance
 */
extern void statechart_Button_raise_enter(Statechart* handle);

/*!
 * @brief Checks whether the state machine is active.
 * A state machine is active if it was entered. It is inactive if it has not been entered at all or if it has been exited.
 * 
 * @param handle Pointer to the statechart instance
 * @return sc_boolean True if the state machine is active, false otherwise.
 */
extern sc_boolean statechart_is_active(const Statechart* handle);

/*!
 * @brief Checks if all active states are final.
 * If there are no active states then the state machine is considered being inactive. In this case this method returns false.
 * 
 * @param handle Pointer to the statechart instance
 * @return sc_boolean True if all active states are final, false otherwise.
 */
extern sc_boolean statechart_is_final(const Statechart* handle);

/*!
 * @brief Checks if the specified state is active.
 * 
 * @param handle Pointer to the statechart instance
 * @param state State to check for activity
 * @return sc_boolean True if the specified state is active, false otherwise.
 */
extern sc_boolean statechart_is_state_active(const Statechart* handle, StatechartStates state);

#ifdef __cplusplus
}
#endif 

#endif /* STATECHART_H_ */

